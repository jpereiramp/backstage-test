apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
# some metadata about the template itself
metadata:
  name: java-ms-backstage-template
  title: Java Microservice v3
  description: Creates a new Java microservice with Springboot
spec:
  owner: backstage/techdocs-core
  type: service

  # these are the steps which are rendered in the frontend with the form input
  parameters:
    - title: Service Info
      required:
        - microserviceName
      properties:
        microserviceName:
          type: string
          title: Service Name
          description: Unique name for your service
        teamName:
          type: string
          title: Team Name
          description: Name of the team who owns this service
    - title: Features
      properties:
        features:
          title: Select Features
          type: array
          default: []
          items:
            type: string
            enum:
              - REST
              - Kafka
              - PostgreSQL
          uniqueItems: true
          ui:widget: checkboxes

  steps:
    - id: fetch-template
      name: Generate Java Code
      action: fetch:template
      input:
        url: https://github.com/jpereiramp/backstage-test/blob/main/templates/java-skeleton
        values:
          microserviceName: ${{ parameters.microserviceName }}
          features: ${{ parameters.features }}
    - id: fetch-template
      name: Generate K8s Code
      action: fetch:template
      input:
        url: https://github.com/jpereiramp/backstage-test/blob/main/templates/k8s-skeleton
        values:
          microserviceName: ${{ parameters.microserviceName }}
          teamName: ${{ parameters.teamName }}
          features: ${{ parameters.features }}
    - id: delete-kafka
      if: ${{ !"Kafka" in parameters.features }}
      action: filesystem:delete
      input:
      files:
        - ./src/main/java/com/example/${{ parameters.name | lower | replace("-", "") }}/async/KafkaConfig.java
    - id: delete-rest
      if: ${{ !"REST" in parameters.features }}
      action: filesystem:delete
      input:
        files:
          - ./src/main/java/com/example/${{ parameters.name | lower | replace("-", "") }}/rest/HelloController.java
    - id: delete-postgres
      if: ${{ !"PostgreSQL" in parameters.features }}
      action: filesystem:delete
      input:
        files:
          - ./src/main/java/com/zwift/${{ parameters.name | lower | replace("-", "") }}/persistence/UserRepository.java
          - ./src/main/java/com/zwift/${{ parameters.name | lower | replace("-", "") }}/persistence/entity/User.java
    - id: publish
      name: Publish to GitHub
      action: publish:github
      input:
        repoUrl: "github.com?repo=${{ parameters.microserviceName }}&owner=jpereiramp"
        description: Service ${{ parameters.microserviceName }} published via Backstage.
        repoVisibility: private
        token: ${{ secrets.githubToken }}
  output:
    links:
      - title: Service Repository
        url: ${{ steps.publish.output.remoteUrl }}
